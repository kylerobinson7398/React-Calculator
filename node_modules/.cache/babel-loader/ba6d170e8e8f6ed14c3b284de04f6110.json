{"ast":null,"code":"import Big from \"big.js\";\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\n\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    } // If there is an operation, update next\n\n\n    if (obj.operation) {\n      if (obj.next) {\n        return {\n          next: obj.next + buttonName\n        };\n      }\n\n      return {\n        next: buttonName\n      };\n    } // If there is no operation, update next and clear the value\n\n\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null\n      };\n    }\n\n    return {\n      next: buttonName,\n      total: null\n    };\n  } // putting value into percentage \n  // Big allowing for a limited amount of decimal points \n  // will turn a total calculation into a percentage as well as just one number typed having no interaction with another number or operation\n\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      var result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result).div(Big(\"100\")).toString(),\n        next: null,\n        operation: null\n      };\n    }\n\n    if (obj.next) {\n      return {\n        next: Big(obj.next).div(Big(\"100\")).toString()\n      };\n    }\n\n    return {};\n  } // allows for a \".\" to be ignored if one number already includes a decimal \n\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n\n      return {\n        next: obj.next + \".\"\n      };\n    }\n\n    return {\n      next: \"0.\"\n    };\n  } // if two numbers are present with an operation, total will equal the operation \n\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  } // making the number negative or positive by multiplying it by -1 \n\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return {\n        next: (-1 * parseFloat(obj.next)).toString()\n      };\n    }\n\n    if (obj.total) {\n      return {\n        total: (-1 * parseFloat(obj.total)).toString()\n      };\n    }\n\n    return {};\n  } // User pressed an operation button and there is an existing operation, update the existing operation to the new one \n\n\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName\n    };\n  } // The user hasn't typed a number yet, just save the operation\n\n\n  if (!obj.next) {\n    return {\n      operation: buttonName\n    };\n  } // save the operation and shift 'next' into 'total'\n\n\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName\n  };\n}","map":{"version":3,"sources":["/Users/kylerobinson/Desktop/Uft-Assignment/React-Calculator/src/logic/calculate.js"],"names":["Big","operate","isNumber","calculate","obj","buttonName","total","next","operation","result","div","toString","includes","parseFloat"],"mappings":"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","sourcesContent":["import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n// putting value into percentage \n// Big allowing for a limited amount of decimal points \n// will turn a total calculation into a percentage as well as just one number typed having no interaction with another number or operation\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big(\"100\"))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big(\"100\"))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  // allows for a \".\" to be ignored if one number already includes a decimal \n  if (buttonName === \".\") {\n    if (obj.next) {\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n\n // if two numbers are present with an operation, total will equal the operation \n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  // making the number negative or positive by multiplying it by -1 \n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // User pressed an operation button and there is an existing operation, update the existing operation to the new one \n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}